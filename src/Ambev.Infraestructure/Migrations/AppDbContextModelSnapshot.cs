// <auto-generated />
using System;
using Ambev.Infraestructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.Domain.Entities.CartDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancel")
                        .HasColumnType("boolean")
                        .HasColumnName("Cancel");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<decimal>("TotalSold")
                        .HasColumnType("numeric")
                        .HasColumnName("TotalSold");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Date" }, "IX_Cars_Date");

                    b.HasIndex(new[] { "Cancel" }, "IX_Carts_Cancel");

                    b.HasIndex(new[] { "UserId" }, "IX_Carts_UserId");

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("Ambev.Domain.Entities.ProductDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Image");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Category" }, "IX_Products_Category");

                    b.HasIndex(new[] { "Price" }, "IX_Products_Price");

                    b.HasIndex(new[] { "Title" }, "IX_Products_Title");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Ambev.Domain.Entities.UserDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Password");

                    b.Property<int>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("Role");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email");

                    b.HasIndex(new[] { "Role" }, "IX_Users_Role");

                    b.HasIndex(new[] { "Status" }, "IX_Users_Status");

                    b.HasIndex(new[] { "Username" }, "IX_Users_Username");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ambev.Domain.Entities.CartDomain", b =>
                {
                    b.OwnsMany("Ambev.Domain.ValueObjects.CartWithCalculatorDomain", "CartWithCalculators", b1 =>
                        {
                            b1.Property<int>("CartDomainId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("Discount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Discount");

                            b1.Property<string>("DiscountMessage")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("DiscountMessage");

                            b1.Property<decimal>("PriceWithDiscount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PriceWithDiscount");

                            b1.HasKey("CartDomainId", "Id");

                            b1.ToTable("CartWithCalculatorDomain");

                            b1.WithOwner()
                                .HasForeignKey("CartDomainId");
                        });

                    b.OwnsMany("Ambev.Domain.ValueObjects.CartProductDomain", "Products", b1 =>
                        {
                            b1.Property<int>("CartId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Category");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("Price");

                            b1.Property<int>("ProductId")
                                .HasColumnType("integer")
                                .HasColumnName("ProductId");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("Quantity");

                            b1.Property<string>("Subsidiary")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Subsidiary");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Title");

                            b1.HasKey("CartId", "Id");

                            b1.ToTable("CartProductDomain");

                            b1.WithOwner()
                                .HasForeignKey("CartId");
                        });

                    b.Navigation("CartWithCalculators");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ambev.Domain.Entities.ProductDomain", b =>
                {
                    b.OwnsOne("Ambev.Domain.ValueObjects.ProductRatingDomain", "Rating", b1 =>
                        {
                            b1.Property<int>("ProductDomainId")
                                .HasColumnType("integer");

                            b1.Property<int>("Count")
                                .HasColumnType("integer")
                                .HasColumnName("Count");

                            b1.Property<double>("Rate")
                                .HasColumnType("double precision")
                                .HasColumnName("Rate");

                            b1.HasKey("ProductDomainId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductDomainId");
                        });

                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("Ambev.Domain.Entities.UserDomain", b =>
                {
                    b.OwnsOne("Ambev.Domain.ValueObjects.AddressDomain", "Address", b1 =>
                        {
                            b1.Property<int>("UserDomainId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<int>("Number")
                                .HasColumnType("integer")
                                .HasColumnName("Number");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Phone");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("UserDomainId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserDomainId");

                            b1.OwnsOne("Ambev.Domain.ValueObjects.GeolocationDomain", "Geolocation", b2 =>
                                {
                                    b2.Property<int>("AddressDomainUserDomainId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Lat")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("Lat");

                                    b2.Property<string>("Long")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("Long");

                                    b2.HasKey("AddressDomainUserDomainId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressDomainUserDomainId");
                                });

                            b1.Navigation("Geolocation")
                                .IsRequired();
                        });

                    b.OwnsOne("Ambev.Domain.ValueObjects.ExternalIdentityDomain", "ExternalIdentity", b1 =>
                        {
                            b1.Property<int>("UserDomainId")
                                .HasColumnType("integer");

                            b1.Property<string>("ExternalId")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("ExternalId");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Provider");

                            b1.HasKey("UserDomainId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserDomainId");
                        });

                    b.OwnsOne("Ambev.Domain.ValueObjects.NameDomain", "Name", b1 =>
                        {
                            b1.Property<int>("UserDomainId")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserDomainId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserDomainId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ExternalIdentity")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
